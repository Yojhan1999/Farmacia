/**
 * [dataLayer Objeto que contiene toda la información que se quiere transferir a Google Tag Manager]
 */
var dataLayer = dataLayer || [];

/**
 * [pushDatos Permite generar la estructura del objeto de datos]
 * @param  {[string]} event        [Definido por GTM - puede ser: crto_homepage, crto_listingpag, crto_productpage,
 * crto_basketpage, crto_transactionpage]
 * @param  {[string]} emailUsuario [Correo del usuario]
 * @param  {[array]} productos    [Arreglo con la información de los productos vistos]
 * @param  {Number} idCompra     [Identificador de la compra en el sistema]
 */
function pushDatos(event, emailUsuario, productos, idCompra=0){
    data = {
        event: event,
        crto: {
            email: emailUsuario,
            products: productos
        }
    };

    if(idCompra != 0){
        data.crto.transactionid = idCompra;
    }

    dataLayer.push(data);
}

/**
 * [datosProducto Permite obtener el código de un producto cuando se está en el detalle
 * o el listado de los codigos de los productos obtenidos como resultado de búsqueda]
 * @param  {[string]} event             [Puede ser crto_listingpag: cuando se está en el detalle del
 * producto o crto_productpage: cuando se listan productos, resultado de búsquedas]
 * @param  {[string]} emailUsuario [Correo del usuario]
 * @param  {[Number]} cantidadProductos [Corresponde al número de productos de un resultado de búsqueda
 * cuya información será enviada a GTM]
 */
function datosProducto(event, emailUsuario, cantidadProductos){
    var arrayProductos = [];
    var inputsCodigosProductos = $("input[name='codigo-producto-gtm']");

    if(inputsCodigosProductos.length > 0 && inputsCodigosProductos.length <= cantidadProductos){
        if(event == "crto_productpage" || inputsCodigosProductos.length == 1){
            arrayProductos.push($(inputsCodigosProductos).val());
        }else {
            for(var i=0; i<cantidadProductos; i++){
                arrayProductos.push($(inputsCodigosProductos[i]).val());
            }
        }

        pushDatos(event, emailUsuario, arrayProductos);
    }
}

/**
 * [ordenarElementosCarro Permite ordenar los divs que contienen elementos del carro por
 * codigo de producto]
 * @param  {[array]} elementosCarro [Arreglo de divs que tienen el atributo data-producto que corresponde
 * al codigo del producto]
 */
function ordenarElementosCarro(elementosCarro){
    elementosCarro.sort(function(a,b) {
        var at = $(a).attr("data-producto");
        var bt = $(b).attr("data-producto");
        return (at > bt)?1:((at < bt)?-1:0);
    });
}

/**
 * [datosCarro Permite obtener el código, cantidad y precio de los productos que se encuentran en el carro
 * de compras o que han sido comprados, además del idcompra en el último caso]
 * @param  {[string]} event        [Puede ser crto_basketpage: para el carro de compras o
 * crto_transactionpage: para la finalización de una compra]
 * @param  {[string]} emailUsuario [Correo del usuario]
 */
function datosCarro(event, emailUsuario){
    var arregloProductosCarro = [];
    var producto;
    var idCompra = 0;
    var objetosCarro = {}

    var elementosCarro = $("[name='carro-elemento-gtm']");
    if (elementosCarro.length > 2){
        ordenarElementosCarro(elementosCarro);
    }

    if(event == "crto_transactionpage"){
        idCompra = Number($("input[name='numero-compra-gtm']").val());
    }

    for (var i = 0; i < (elementosCarro.length); i++) {
        if(Number($(elementosCarro[i]).find("input[name='cantidad-producto-unidad-gtm']").val()) == 0){
            continue;
        }

        var idProducto = $(elementosCarro[i]).find("input[name='codigo-producto-gtm']").val();
        var price = Number($(elementosCarro[i]).find("input[name='precio-producto-gtm']").val());
        var quantity = Number($(elementosCarro[i]).find("input[name='cantidad-producto-unidad-gtm']").val());

        if(producto != null && producto.id == idProducto){
            producto.price += price;
            producto.quantity += quantity;
        }else{
            producto = {
                id: idProducto,
                price: price,
                quantity: quantity
            };

            arregloProductosCarro.push(producto);
        }
    }

    if(arregloProductosCarro.length > 0){
        pushDatos(event, emailUsuario, arregloProductosCarro, idCompra);
    }
}

/**
 * [Permite enviar información a GTM si la página en la que se encuentra el usuario
 * contiene las etiquetas que identifican que se deberá enviar dicha información.]
 */
$( document ).ready(function() {
    var paramCantidadProductos = Number($("#cantidad-productos-gtm").val());
    var emailUsuario = $("#email-gtm").val().toLowerCase().trim();
    var divGoogleTagManager = $( '[data-gtm="gtm"]' );

    if (divGoogleTagManager.length > 0 && emailUsuario != ""){
        var event = divGoogleTagManager.attr("data-event");

        if(event == "crto_listingpag" || event == "crto_productpage"){
            datosProducto(event, emailUsuario, paramCantidadProductos);
        }else if(event == "crto_basketpage" || event == "crto_transactionpage"){
            datosCarro(event, emailUsuario);
        }
    }
});


